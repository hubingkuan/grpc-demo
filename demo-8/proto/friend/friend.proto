syntax = "proto3";

package  friend;

// ;后面是生产的go文件包名
option go_package = "grpc-demo/demo-8/proto/friend/;friend";

import "validate/validate.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

//加好友的途径
enum AddFriendType
{
  NormalAdd = 0; //普通加好友
  LetterAdd = 1; //留言板加好友
}

enum DegreeMethod {
  Other = 0;
  PrivateChat = 1;
  GiftGiveMethod = 2;
}

// 好友基本信息
message FriendBaseInfo {
  // @inject_tag: gorm:"primary_key;column:player_id;type:bigint(20) unsigned;not null;comment:'玩家ID'" json:"playerID"
  uint64 playerId = 1 [(validate.rules).uint64.gt = 999];  // 玩家ID
  string name = 2 [(validate.rules).string = {
    pattern:   "^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$",
    max_bytes: 256,
  }];  // 昵称
  bool isOnline = 3;  // 是否在线
  string frame = 4 [(validate.rules).string.prefix = "foo"];  // 相框 前缀必须是foo
  uint32 head = 5 [(validate.rules).uint32 = {in:[1, 2, 3, 4, 5]}];  // 头像 必须在指定值1,2,3,4,5内
  uint32 model = 6 [(validate.rules).uint32 = {gte: 50,  lte: 90}];  // 模型
  string tag = 7 [(validate.rules).string = {min_len:1,max_len:10}] ;// 备注 最大长度1 最小长度10
  int64 offline = 8;  // 离线时间
  int32 friendDegree = 9;  // 好友度
  AddFriendType addType = 10 [(validate.rules).enum.const = 1]; // 加好友的途径 字段必须是指定的枚举值
  int32 baseLevel = 11; // 角色等级
  string email = 12 [(validate.rules).string.email = true];
  bool x = 13 [(validate.rules).bool.const = true];  // 必须是指定的值 true
  repeated float xx = 14 [(validate.rules).repeated.unique = true]; // 重复的值必须是唯一的
  Book book = 15;
}

message RadarSearchPlayerInfo {
  float distance = 1;
  uint64 playerId = 2;
  uint32 bubbleFrame = 3; // 气泡框
  uint32 head = 4; // 头像
  uint32 headFrame = 5; // 头像框
  string nickName = 6; // 昵称
}

message SnakeEnumRequest {
  string what = 1;
  string who = 2;
  string where = 3;
  int64 revision = 4; // 不受模板约束的任何字段会自动成为http的查询参数  Mapped to URL query parameter `revision`.
  message SubMessage {
    string sub_field = 1;
  }
  SubMessage sub = 5; //  Mapped to URL query parameter `sub.sub_field`.
}

message Book {
  // The resource name of the book.
  //
  // Format: `publishers/{publisher}/books/{book}`
  //
  // Example: `publishers/1257894000000000000/books/my-book`
  string name = 1;

  // Output only. The book's ID.
  string id = 2;

  // Output only. Creation time of the book.
  google.protobuf.Timestamp create_time = 3;
}

message SnakeEnumResponse {}

service friend{
  rpc GetFriendInfo(FriendBaseInfo) returns (RadarSearchPlayerInfo){
    option (google.api.http) = {
      post: "/v1/getFriendInfo"
      // body 必须是 FriendBaseInfo内的属性  一般来说都是 * 代表全部
      body: "book"
    };
  }

  rpc Test(RadarSearchPlayerInfo) returns (RadarSearchPlayerInfo);

}


service SnakeEnumService {
  rpc SnakeEnum(SnakeEnumRequest) returns (SnakeEnumResponse) {
    option (google.api.http) = {
      // 将路径参数赋值给proto对象
      get: "/v1/example/snake/{who}/{what}/{where}"
      // 1个rpc定义多个http方法
      additional_bindings{
        get: "/v2/message/{who}/{what}/{where}/{revision}"
      }
    };
  }
}