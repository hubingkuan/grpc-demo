// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: friend/friend.proto

package friend

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 加好友的途径
type AddFriendType int32

const (
	AddFriendType_NormalAdd AddFriendType = 0 //普通加好友
	AddFriendType_LetterAdd AddFriendType = 1 //留言板加好友
)

// Enum value maps for AddFriendType.
var (
	AddFriendType_name = map[int32]string{
		0: "NormalAdd",
		1: "LetterAdd",
	}
	AddFriendType_value = map[string]int32{
		"NormalAdd": 0,
		"LetterAdd": 1,
	}
)

func (x AddFriendType) Enum() *AddFriendType {
	p := new(AddFriendType)
	*p = x
	return p
}

func (x AddFriendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddFriendType) Descriptor() protoreflect.EnumDescriptor {
	return file_friend_friend_proto_enumTypes[0].Descriptor()
}

func (AddFriendType) Type() protoreflect.EnumType {
	return &file_friend_friend_proto_enumTypes[0]
}

func (x AddFriendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddFriendType.Descriptor instead.
func (AddFriendType) EnumDescriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{0}
}

type DegreeMethod int32

const (
	DegreeMethod_Other          DegreeMethod = 0
	DegreeMethod_PrivateChat    DegreeMethod = 1
	DegreeMethod_GiftGiveMethod DegreeMethod = 2
)

// Enum value maps for DegreeMethod.
var (
	DegreeMethod_name = map[int32]string{
		0: "Other",
		1: "PrivateChat",
		2: "GiftGiveMethod",
	}
	DegreeMethod_value = map[string]int32{
		"Other":          0,
		"PrivateChat":    1,
		"GiftGiveMethod": 2,
	}
)

func (x DegreeMethod) Enum() *DegreeMethod {
	p := new(DegreeMethod)
	*p = x
	return p
}

func (x DegreeMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DegreeMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_friend_friend_proto_enumTypes[1].Descriptor()
}

func (DegreeMethod) Type() protoreflect.EnumType {
	return &file_friend_friend_proto_enumTypes[1]
}

func (x DegreeMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DegreeMethod.Descriptor instead.
func (DegreeMethod) EnumDescriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{1}
}

// 好友基本信息
type FriendBaseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: gorm:"primary_key;column:player_id;type:bigint(20) unsigned;not null;comment:'玩家ID'" json:"playerID"
	PlayerId     uint64        `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerID" gorm:"primary_key;column:player_id;type:bigint(20) unsigned;not null;comment:'玩家ID'"` // 玩家ID
	Name         string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                     // 昵称
	IsOnline     bool          `protobuf:"varint,3,opt,name=isOnline,proto3" json:"isOnline,omitempty"`                                                                            // 是否在线
	Frame        string        `protobuf:"bytes,4,opt,name=frame,proto3" json:"frame,omitempty"`                                                                                   // 相框 前缀必须是foo
	Head         uint32        `protobuf:"varint,5,opt,name=head,proto3" json:"head,omitempty"`                                                                                    // 头像 必须在指定值1,2,3,4,5内
	Model        uint32        `protobuf:"varint,6,opt,name=model,proto3" json:"model,omitempty"`                                                                                  // 模型
	Tag          string        `protobuf:"bytes,7,opt,name=tag,proto3" json:"tag,omitempty"`                                                                                       // 备注 最大长度1 最小长度10
	Offline      int64         `protobuf:"varint,8,opt,name=offline,proto3" json:"offline,omitempty"`                                                                              // 离线时间
	FriendDegree int32         `protobuf:"varint,9,opt,name=friendDegree,proto3" json:"friendDegree,omitempty"`                                                                    // 好友度
	AddType      AddFriendType `protobuf:"varint,10,opt,name=addType,proto3,enum=friend.AddFriendType" json:"addType,omitempty"`                                                   // 加好友的途径 字段必须是指定的枚举值
	BaseLevel    int32         `protobuf:"varint,11,opt,name=baseLevel,proto3" json:"baseLevel,omitempty"`                                                                         // 角色等级
	Email        string        `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	X            bool          `protobuf:"varint,13,opt,name=x,proto3" json:"x,omitempty"`           // 必须是指定的值 true
	Xx           []float32     `protobuf:"fixed32,14,rep,packed,name=xx,proto3" json:"xx,omitempty"` // 重复的值必须是唯一的
	Book         *Book         `protobuf:"bytes,15,opt,name=book,proto3" json:"book,omitempty"`
}

func (x *FriendBaseInfo) Reset() {
	*x = FriendBaseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendBaseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendBaseInfo) ProtoMessage() {}

func (x *FriendBaseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendBaseInfo.ProtoReflect.Descriptor instead.
func (*FriendBaseInfo) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{0}
}

func (x *FriendBaseInfo) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *FriendBaseInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FriendBaseInfo) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *FriendBaseInfo) GetFrame() string {
	if x != nil {
		return x.Frame
	}
	return ""
}

func (x *FriendBaseInfo) GetHead() uint32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *FriendBaseInfo) GetModel() uint32 {
	if x != nil {
		return x.Model
	}
	return 0
}

func (x *FriendBaseInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *FriendBaseInfo) GetOffline() int64 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *FriendBaseInfo) GetFriendDegree() int32 {
	if x != nil {
		return x.FriendDegree
	}
	return 0
}

func (x *FriendBaseInfo) GetAddType() AddFriendType {
	if x != nil {
		return x.AddType
	}
	return AddFriendType_NormalAdd
}

func (x *FriendBaseInfo) GetBaseLevel() int32 {
	if x != nil {
		return x.BaseLevel
	}
	return 0
}

func (x *FriendBaseInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *FriendBaseInfo) GetX() bool {
	if x != nil {
		return x.X
	}
	return false
}

func (x *FriendBaseInfo) GetXx() []float32 {
	if x != nil {
		return x.Xx
	}
	return nil
}

func (x *FriendBaseInfo) GetBook() *Book {
	if x != nil {
		return x.Book
	}
	return nil
}

type RadarSearchPlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distance    float32 `protobuf:"fixed32,1,opt,name=distance,proto3" json:"distance,omitempty"`
	PlayerId    uint64  `protobuf:"varint,2,opt,name=playerId,proto3" json:"playerId,omitempty"`
	BubbleFrame uint32  `protobuf:"varint,3,opt,name=bubbleFrame,proto3" json:"bubbleFrame,omitempty"` // 气泡框
	Head        uint32  `protobuf:"varint,4,opt,name=head,proto3" json:"head,omitempty"`               // 头像
	HeadFrame   uint32  `protobuf:"varint,5,opt,name=headFrame,proto3" json:"headFrame,omitempty"`     // 头像框
	NickName    string  `protobuf:"bytes,6,opt,name=nickName,proto3" json:"nickName,omitempty"`        // 昵称
}

func (x *RadarSearchPlayerInfo) Reset() {
	*x = RadarSearchPlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarSearchPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarSearchPlayerInfo) ProtoMessage() {}

func (x *RadarSearchPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarSearchPlayerInfo.ProtoReflect.Descriptor instead.
func (*RadarSearchPlayerInfo) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{1}
}

func (x *RadarSearchPlayerInfo) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *RadarSearchPlayerInfo) GetPlayerId() uint64 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *RadarSearchPlayerInfo) GetBubbleFrame() uint32 {
	if x != nil {
		return x.BubbleFrame
	}
	return 0
}

func (x *RadarSearchPlayerInfo) GetHead() uint32 {
	if x != nil {
		return x.Head
	}
	return 0
}

func (x *RadarSearchPlayerInfo) GetHeadFrame() uint32 {
	if x != nil {
		return x.HeadFrame
	}
	return 0
}

func (x *RadarSearchPlayerInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

type SnakeEnumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	What     string                       `protobuf:"bytes,1,opt,name=what,proto3" json:"what,omitempty"`
	Who      string                       `protobuf:"bytes,2,opt,name=who,proto3" json:"who,omitempty"`
	Where    string                       `protobuf:"bytes,3,opt,name=where,proto3" json:"where,omitempty"`
	Revision int64                        `protobuf:"varint,4,opt,name=revision,proto3" json:"revision,omitempty"` // 不受模板约束的任何字段会自动成为http的查询参数  Mapped to URL query parameter `revision`.
	Sub      *SnakeEnumRequest_SubMessage `protobuf:"bytes,5,opt,name=sub,proto3" json:"sub,omitempty"`            //  Mapped to URL query parameter `sub.sub_field`.
}

func (x *SnakeEnumRequest) Reset() {
	*x = SnakeEnumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnakeEnumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnakeEnumRequest) ProtoMessage() {}

func (x *SnakeEnumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnakeEnumRequest.ProtoReflect.Descriptor instead.
func (*SnakeEnumRequest) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{2}
}

func (x *SnakeEnumRequest) GetWhat() string {
	if x != nil {
		return x.What
	}
	return ""
}

func (x *SnakeEnumRequest) GetWho() string {
	if x != nil {
		return x.Who
	}
	return ""
}

func (x *SnakeEnumRequest) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

func (x *SnakeEnumRequest) GetRevision() int64 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *SnakeEnumRequest) GetSub() *SnakeEnumRequest_SubMessage {
	if x != nil {
		return x.Sub
	}
	return nil
}

type Book struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the book.
	//
	// Format: `publishers/{publisher}/books/{book}`
	//
	// Example: `publishers/1257894000000000000/books/my-book`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Output only. The book's ID.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Output only. Creation time of the book.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *Book) Reset() {
	*x = Book{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book) ProtoMessage() {}

func (x *Book) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book.ProtoReflect.Descriptor instead.
func (*Book) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{3}
}

func (x *Book) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Book) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Book) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type SnakeEnumResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SnakeEnumResponse) Reset() {
	*x = SnakeEnumResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnakeEnumResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnakeEnumResponse) ProtoMessage() {}

func (x *SnakeEnumResponse) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnakeEnumResponse.ProtoReflect.Descriptor instead.
func (*SnakeEnumResponse) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{4}
}

type SnakeEnumRequest_SubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubField string `protobuf:"bytes,1,opt,name=sub_field,json=subField,proto3" json:"sub_field,omitempty"`
}

func (x *SnakeEnumRequest_SubMessage) Reset() {
	*x = SnakeEnumRequest_SubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_friend_friend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnakeEnumRequest_SubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnakeEnumRequest_SubMessage) ProtoMessage() {}

func (x *SnakeEnumRequest_SubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_friend_friend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnakeEnumRequest_SubMessage.ProtoReflect.Descriptor instead.
func (*SnakeEnumRequest_SubMessage) Descriptor() ([]byte, []int) {
	return file_friend_friend_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SnakeEnumRequest_SubMessage) GetSubField() string {
	if x != nil {
		return x.SubField
	}
	return ""
}

var File_friend_friend_proto protoreflect.FileDescriptor

var file_friend_friend_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x04, 0x0a, 0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x32,
	0x03, 0x20, 0xe7, 0x07, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x42,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xfa, 0x42,
	0x2b, 0x72, 0x29, 0x28, 0x80, 0x02, 0x32, 0x24, 0x5e, 0x5b, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x28, 0x20, 0x5b, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x5d, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x2b, 0x29, 0x2a, 0x24, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x20,
	0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x72, 0x05, 0x3a, 0x03, 0x66, 0x6f, 0x6f, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f,
	0xfa, 0x42, 0x0c, 0x2a, 0x0a, 0x30, 0x01, 0x30, 0x02, 0x30, 0x03, 0x30, 0x04, 0x30, 0x05, 0x52,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x1f, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x18, 0x5a, 0x28, 0x32, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x0a, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x67, 0x72, 0x65,
	0x65, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x08, 0x01, 0x52, 0x07, 0x61, 0x64, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x15, 0x0a, 0x01, 0x78, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x6a, 0x02, 0x08, 0x01, 0x52, 0x01, 0x78,
	0x12, 0x18, 0x0a, 0x02, 0x78, 0x78, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x02, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x18, 0x01, 0x52, 0x02, 0x78, 0x78, 0x12, 0x20, 0x0a, 0x04, 0x62, 0x6f,
	0x6f, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0xbf, 0x01, 0x0a,
	0x15, 0x52, 0x61, 0x64, 0x61, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x68, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcc,
	0x01, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x77, 0x68, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x73,
	0x75, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x73,
	0x75, 0x62, 0x1a, 0x29, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x67, 0x0a,
	0x04, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x2d, 0x0a, 0x0d, 0x41,
	0x64, 0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x10, 0x01, 0x2a, 0x3e, 0x0a, 0x0c, 0x44, 0x65,
	0x67, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x69, 0x66, 0x74, 0x47, 0x69,
	0x76, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x10, 0x02, 0x32, 0xb7, 0x01, 0x0a, 0x06, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x67, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1d,
	0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x44,
	0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e,
	0x52, 0x61, 0x64, 0x61, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1d, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x52,
	0x61, 0x64, 0x61, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x32, 0xb4, 0x01, 0x0a, 0x10, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9f, 0x01, 0x0a, 0x09, 0x53, 0x6e,
	0x61, 0x6b, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2e, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x57, 0x12, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2f, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2f, 0x7b, 0x77, 0x68, 0x6f, 0x7d, 0x2f, 0x7b, 0x77,
	0x68, 0x61, 0x74, 0x7d, 0x2f, 0x7b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x7d, 0x5a, 0x2d, 0x12, 0x2b,
	0x2f, 0x76, 0x32, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x77, 0x68, 0x6f,
	0x7d, 0x2f, 0x7b, 0x77, 0x68, 0x61, 0x74, 0x7d, 0x2f, 0x7b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x7d,
	0x2f, 0x7b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x7d, 0x42, 0x27, 0x5a, 0x25, 0x67,
	0x72, 0x70, 0x63, 0x2d, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x2d, 0x38, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x2f, 0x3b, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_friend_friend_proto_rawDescOnce sync.Once
	file_friend_friend_proto_rawDescData = file_friend_friend_proto_rawDesc
)

func file_friend_friend_proto_rawDescGZIP() []byte {
	file_friend_friend_proto_rawDescOnce.Do(func() {
		file_friend_friend_proto_rawDescData = protoimpl.X.CompressGZIP(file_friend_friend_proto_rawDescData)
	})
	return file_friend_friend_proto_rawDescData
}

var file_friend_friend_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_friend_friend_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_friend_friend_proto_goTypes = []interface{}{
	(AddFriendType)(0),                  // 0: friend.AddFriendType
	(DegreeMethod)(0),                   // 1: friend.DegreeMethod
	(*FriendBaseInfo)(nil),              // 2: friend.FriendBaseInfo
	(*RadarSearchPlayerInfo)(nil),       // 3: friend.RadarSearchPlayerInfo
	(*SnakeEnumRequest)(nil),            // 4: friend.SnakeEnumRequest
	(*Book)(nil),                        // 5: friend.Book
	(*SnakeEnumResponse)(nil),           // 6: friend.SnakeEnumResponse
	(*SnakeEnumRequest_SubMessage)(nil), // 7: friend.SnakeEnumRequest.SubMessage
	(*timestamppb.Timestamp)(nil),       // 8: google.protobuf.Timestamp
}
var file_friend_friend_proto_depIdxs = []int32{
	0, // 0: friend.FriendBaseInfo.addType:type_name -> friend.AddFriendType
	5, // 1: friend.FriendBaseInfo.book:type_name -> friend.Book
	7, // 2: friend.SnakeEnumRequest.sub:type_name -> friend.SnakeEnumRequest.SubMessage
	8, // 3: friend.Book.create_time:type_name -> google.protobuf.Timestamp
	2, // 4: friend.friend.GetFriendInfo:input_type -> friend.FriendBaseInfo
	3, // 5: friend.friend.Test:input_type -> friend.RadarSearchPlayerInfo
	4, // 6: friend.SnakeEnumService.SnakeEnum:input_type -> friend.SnakeEnumRequest
	3, // 7: friend.friend.GetFriendInfo:output_type -> friend.RadarSearchPlayerInfo
	3, // 8: friend.friend.Test:output_type -> friend.RadarSearchPlayerInfo
	6, // 9: friend.SnakeEnumService.SnakeEnum:output_type -> friend.SnakeEnumResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_friend_friend_proto_init() }
func file_friend_friend_proto_init() {
	if File_friend_friend_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_friend_friend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendBaseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarSearchPlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnakeEnumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnakeEnumResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_friend_friend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnakeEnumRequest_SubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_friend_friend_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_friend_friend_proto_goTypes,
		DependencyIndexes: file_friend_friend_proto_depIdxs,
		EnumInfos:         file_friend_friend_proto_enumTypes,
		MessageInfos:      file_friend_friend_proto_msgTypes,
	}.Build()
	File_friend_friend_proto = out.File
	file_friend_friend_proto_rawDesc = nil
	file_friend_friend_proto_goTypes = nil
	file_friend_friend_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FriendClient is the client API for Friend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FriendClient interface {
	GetFriendInfo(ctx context.Context, in *FriendBaseInfo, opts ...grpc.CallOption) (*RadarSearchPlayerInfo, error)
	Test(ctx context.Context, in *RadarSearchPlayerInfo, opts ...grpc.CallOption) (*RadarSearchPlayerInfo, error)
}

type friendClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendClient(cc grpc.ClientConnInterface) FriendClient {
	return &friendClient{cc}
}

func (c *friendClient) GetFriendInfo(ctx context.Context, in *FriendBaseInfo, opts ...grpc.CallOption) (*RadarSearchPlayerInfo, error) {
	out := new(RadarSearchPlayerInfo)
	err := c.cc.Invoke(ctx, "/friend.friend/GetFriendInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) Test(ctx context.Context, in *RadarSearchPlayerInfo, opts ...grpc.CallOption) (*RadarSearchPlayerInfo, error) {
	out := new(RadarSearchPlayerInfo)
	err := c.cc.Invoke(ctx, "/friend.friend/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServer is the server API for Friend service.
type FriendServer interface {
	GetFriendInfo(context.Context, *FriendBaseInfo) (*RadarSearchPlayerInfo, error)
	Test(context.Context, *RadarSearchPlayerInfo) (*RadarSearchPlayerInfo, error)
}

// UnimplementedFriendServer can be embedded to have forward compatible implementations.
type UnimplementedFriendServer struct {
}

func (*UnimplementedFriendServer) GetFriendInfo(context.Context, *FriendBaseInfo) (*RadarSearchPlayerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendInfo not implemented")
}
func (*UnimplementedFriendServer) Test(context.Context, *RadarSearchPlayerInfo) (*RadarSearchPlayerInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}

func RegisterFriendServer(s *grpc.Server, srv FriendServer) {
	s.RegisterService(&_Friend_serviceDesc, srv)
}

func _Friend_GetFriendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendBaseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).GetFriendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/GetFriendInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).GetFriendInfo(ctx, req.(*FriendBaseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RadarSearchPlayerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.friend/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).Test(ctx, req.(*RadarSearchPlayerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Friend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "friend.friend",
	HandlerType: (*FriendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFriendInfo",
			Handler:    _Friend_GetFriendInfo_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _Friend_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friend/friend.proto",
}

// SnakeEnumServiceClient is the client API for SnakeEnumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnakeEnumServiceClient interface {
	SnakeEnum(ctx context.Context, in *SnakeEnumRequest, opts ...grpc.CallOption) (*SnakeEnumResponse, error)
}

type snakeEnumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnakeEnumServiceClient(cc grpc.ClientConnInterface) SnakeEnumServiceClient {
	return &snakeEnumServiceClient{cc}
}

func (c *snakeEnumServiceClient) SnakeEnum(ctx context.Context, in *SnakeEnumRequest, opts ...grpc.CallOption) (*SnakeEnumResponse, error) {
	out := new(SnakeEnumResponse)
	err := c.cc.Invoke(ctx, "/friend.SnakeEnumService/SnakeEnum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnakeEnumServiceServer is the server API for SnakeEnumService service.
type SnakeEnumServiceServer interface {
	SnakeEnum(context.Context, *SnakeEnumRequest) (*SnakeEnumResponse, error)
}

// UnimplementedSnakeEnumServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSnakeEnumServiceServer struct {
}

func (*UnimplementedSnakeEnumServiceServer) SnakeEnum(context.Context, *SnakeEnumRequest) (*SnakeEnumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnakeEnum not implemented")
}

func RegisterSnakeEnumServiceServer(s *grpc.Server, srv SnakeEnumServiceServer) {
	s.RegisterService(&_SnakeEnumService_serviceDesc, srv)
}

func _SnakeEnumService_SnakeEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnakeEnumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnakeEnumServiceServer).SnakeEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friend.SnakeEnumService/SnakeEnum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnakeEnumServiceServer).SnakeEnum(ctx, req.(*SnakeEnumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SnakeEnumService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "friend.SnakeEnumService",
	HandlerType: (*SnakeEnumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SnakeEnum",
			Handler:    _SnakeEnumService_SnakeEnum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friend/friend.proto",
}
