// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: login/login.proto

package login

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoginData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginDataMultiError, or nil
// if none found.
func (m *LoginData) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Result

	// no validation rules for UserID

	// no validation rules for Token

	// no validation rules for SessionID

	// no validation rules for SceneID

	// no validation rules for CdKey

	// no validation rules for IP

	// no validation rules for Port

	// no validation rules for ZoneId

	// no validation rules for Reason

	// no validation rules for ExpTime

	// no validation rules for BusyLevel

	// no validation rules for BusyWaitTime

	// no validation rules for ServerTime

	// no validation rules for RegRegTimeEnd

	// no validation rules for IsPreReged

	// no validation rules for IsGetShareRewards

	// no validation rules for ServerOpenTime

	// no validation rules for IsIpInWhiteList

	// no validation rules for ShuShuGameID

	// no validation rules for RegRegTimeStart

	for idx, item := range m.GetWorldList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoginDataValidationError{
						field:  fmt.Sprintf("WorldList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoginDataValidationError{
						field:  fmt.Sprintf("WorldList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoginDataValidationError{
					field:  fmt.Sprintf("WorldList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRecommendWorld() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoginDataValidationError{
						field:  fmt.Sprintf("RecommendWorld[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoginDataValidationError{
						field:  fmt.Sprintf("RecommendWorld[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoginDataValidationError{
					field:  fmt.Sprintf("RecommendWorld[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetZoneList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoginDataValidationError{
						field:  fmt.Sprintf("ZoneList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoginDataValidationError{
						field:  fmt.Sprintf("ZoneList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoginDataValidationError{
					field:  fmt.Sprintf("ZoneList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LoginDataMultiError(errors)
	}

	return nil
}

// LoginDataMultiError is an error wrapping multiple validation errors returned
// by LoginData.ValidateAll() if the designated constraints aren't met.
type LoginDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginDataMultiError) AllErrors() []error { return m }

// LoginDataValidationError is the validation error returned by
// LoginData.Validate if the designated constraints aren't met.
type LoginDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginDataValidationError) ErrorName() string { return "LoginDataValidationError" }

// Error satisfies the builtin error interface
func (e LoginDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginDataValidationError{}

// Validate checks the field values on ZoneInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ZoneInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ZoneInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ZoneInfoMultiError, or nil
// if none found.
func (m *ZoneInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ZoneInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return ZoneInfoMultiError(errors)
	}

	return nil
}

// ZoneInfoMultiError is an error wrapping multiple validation errors returned
// by ZoneInfo.ValidateAll() if the designated constraints aren't met.
type ZoneInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ZoneInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ZoneInfoMultiError) AllErrors() []error { return m }

// ZoneInfoValidationError is the validation error returned by
// ZoneInfo.Validate if the designated constraints aren't met.
type ZoneInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ZoneInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ZoneInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ZoneInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ZoneInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ZoneInfoValidationError) ErrorName() string { return "ZoneInfoValidationError" }

// Error satisfies the builtin error interface
func (e ZoneInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sZoneInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ZoneInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ZoneInfoValidationError{}

// Validate checks the field values on WorldEndPointInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorldEndPointInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorldEndPointInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorldEndPointInfoMultiError, or nil if none found.
func (m *WorldEndPointInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *WorldEndPointInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ZoneId

	// no validation rules for SId

	// no validation rules for Addr

	// no validation rules for Name

	// no validation rules for Players

	// no validation rules for PIdx

	// no validation rules for Max

	// no validation rules for Stat

	if len(errors) > 0 {
		return WorldEndPointInfoMultiError(errors)
	}

	return nil
}

// WorldEndPointInfoMultiError is an error wrapping multiple validation errors
// returned by WorldEndPointInfo.ValidateAll() if the designated constraints
// aren't met.
type WorldEndPointInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorldEndPointInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorldEndPointInfoMultiError) AllErrors() []error { return m }

// WorldEndPointInfoValidationError is the validation error returned by
// WorldEndPointInfo.Validate if the designated constraints aren't met.
type WorldEndPointInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorldEndPointInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorldEndPointInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorldEndPointInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorldEndPointInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorldEndPointInfoValidationError) ErrorName() string {
	return "WorldEndPointInfoValidationError"
}

// Error satisfies the builtin error interface
func (e WorldEndPointInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorldEndPointInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorldEndPointInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorldEndPointInfoValidationError{}

// Validate checks the field values on WorldInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorldInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorldInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorldInfoMultiError, or nil
// if none found.
func (m *WorldInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *WorldInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ErrCode

	// no validation rules for ZoneId

	for idx, item := range m.GetEndPointsInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorldInfoValidationError{
						field:  fmt.Sprintf("EndPointsInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorldInfoValidationError{
						field:  fmt.Sprintf("EndPointsInfo[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorldInfoValidationError{
					field:  fmt.Sprintf("EndPointsInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRecently() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorldInfoValidationError{
						field:  fmt.Sprintf("Recently[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorldInfoValidationError{
						field:  fmt.Sprintf("Recently[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorldInfoValidationError{
					field:  fmt.Sprintf("Recently[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRecommend() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorldInfoValidationError{
						field:  fmt.Sprintf("Recommend[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorldInfoValidationError{
						field:  fmt.Sprintf("Recommend[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorldInfoValidationError{
					field:  fmt.Sprintf("Recommend[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WorldInfoMultiError(errors)
	}

	return nil
}

// WorldInfoMultiError is an error wrapping multiple validation errors returned
// by WorldInfo.ValidateAll() if the designated constraints aren't met.
type WorldInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorldInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorldInfoMultiError) AllErrors() []error { return m }

// WorldInfoValidationError is the validation error returned by
// WorldInfo.Validate if the designated constraints aren't met.
type WorldInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorldInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorldInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorldInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorldInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorldInfoValidationError) ErrorName() string { return "WorldInfoValidationError" }

// Error satisfies the builtin error interface
func (e WorldInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorldInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorldInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorldInfoValidationError{}

// Validate checks the field values on WorldEndPointInfoRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WorldEndPointInfoRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorldEndPointInfoRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorldEndPointInfoRspMultiError, or nil if none found.
func (m *WorldEndPointInfoRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *WorldEndPointInfoRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ErrCode

	if all {
		switch v := interface{}(m.GetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorldEndPointInfoRspValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorldEndPointInfoRspValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorldEndPointInfoRspValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorldEndPointInfoRspMultiError(errors)
	}

	return nil
}

// WorldEndPointInfoRspMultiError is an error wrapping multiple validation
// errors returned by WorldEndPointInfoRsp.ValidateAll() if the designated
// constraints aren't met.
type WorldEndPointInfoRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorldEndPointInfoRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorldEndPointInfoRspMultiError) AllErrors() []error { return m }

// WorldEndPointInfoRspValidationError is the validation error returned by
// WorldEndPointInfoRsp.Validate if the designated constraints aren't met.
type WorldEndPointInfoRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorldEndPointInfoRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorldEndPointInfoRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorldEndPointInfoRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorldEndPointInfoRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorldEndPointInfoRspValidationError) ErrorName() string {
	return "WorldEndPointInfoRspValidationError"
}

// Error satisfies the builtin error interface
func (e WorldEndPointInfoRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorldEndPointInfoRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorldEndPointInfoRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorldEndPointInfoRspValidationError{}

// Validate checks the field values on KickOutPlayer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KickOutPlayer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KickOutPlayer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KickOutPlayerMultiError, or
// nil if none found.
func (m *KickOutPlayer) ValidateAll() error {
	return m.validate(true)
}

func (m *KickOutPlayer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for KickOutReason

	// no validation rules for Reason

	// no validation rules for SvrId

	if len(errors) > 0 {
		return KickOutPlayerMultiError(errors)
	}

	return nil
}

// KickOutPlayerMultiError is an error wrapping multiple validation errors
// returned by KickOutPlayer.ValidateAll() if the designated constraints
// aren't met.
type KickOutPlayerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KickOutPlayerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KickOutPlayerMultiError) AllErrors() []error { return m }

// KickOutPlayerValidationError is the validation error returned by
// KickOutPlayer.Validate if the designated constraints aren't met.
type KickOutPlayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KickOutPlayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KickOutPlayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KickOutPlayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KickOutPlayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KickOutPlayerValidationError) ErrorName() string { return "KickOutPlayerValidationError" }

// Error satisfies the builtin error interface
func (e KickOutPlayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKickOutPlayer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KickOutPlayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KickOutPlayerValidationError{}
